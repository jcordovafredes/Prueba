install.packages("geojsonio")
install.packages("geojsonio")
pan=200
huevo=100
pan*2+huevo*4
compra=pan*2+huevo*4
##vectores
#vector de nombre
nombres = ("Carlos", "Matias", "Fernando")
##vectores
#vector de nombre
nombres = c("Carlos", "Matias", "Fernando")
#vector de peso
peso = c(65,70,86)
#vector logico
mayor18= c (FALSE, TRUE, TRUE)
Pesos_altos= pesos >=70
Pesos_altos= pesos >= 70
Pesos_altos = pesos >= 70
pesos_altos = pesos >= 70
pesos_altos = peso >= 70
peso[pesos_altos]
##Matrices
##Nuevos pesos
peso2020 = peso
peso2021 = c(70,80,90)
peso_alumno = matrix(c(peso2020, peso2021), nrow = 3 , ncol=2)
View(peso_alumno)
colnames(peso_alumno) = c("peso2020", "peso2021")
colnames(peso_alumno) = c("peso 2020", "peso 2021")
colnames(peso_alumno) = c("Peso 2020", "Peso 2021")
rownames(peso_alumno) = nombres
peso_alumno[2,2]
peso_alumno[2, "Peso 2021"]
df_alumnos = data.frame(nombres,peso,mayor18)
View(df_alumnos)
View(df_alumnos)
##se crea archivo csv
write.csv(df_alumnos, "C:/Users/Marco Córdova/Desktop/Ayudantia/Ayudantia_R/DATOS/CSV")
##se crea archivo csv
write.csv(df_alumnos, "C:\\Users\\Marco Córdova\\Desktop\\Ayudantia\\Ayudantia_R\\DATOS\\CSV")
##se crea archivo csv
write.csv(df_alumnos, "C:\\Users\\Marco Córdova\\Desktop\\Ayudantia\\Ayudantia_R\\DATOS\\1.CSV")
install.packages("readr")
INDICE_HACINAMIENTO <- read_csv("C:/Users/Marco Córdova/Desktop/Ayudantia/Ayudantia_R/DATOS/CSV/INDICE_HACINAMIENTO.csv",
locale = locale(encoding = "ISO-8859-1"))
comunas_hac<- read_csv("C:/Users/Marco Córdova/Desktop/Ayudantia/Ayudantia_R/DATOS/CSV/INDICE_HACINAMIENTO.csv",
locale = locale(encoding = "ISO-8859-1"))
library(readr)
INDICE_HACINAMIENTO <- read_csv("C:/Users/Marco Córdova/Desktop/Ayudantia/Ayudantia_R/DATOS/CSV/INDICE_HACINAMIENTO.csv",
locale = locale(encoding = "ISO-8859-1"))
View(INDICE_HACINAMIENTO)
View(INDICE_HACINAMIENTO)
INDICE_HACINAMIENTO$P_HACINAMIENTO
mean(INDICE_HACINAMIENTO$P_HACINAMIENTO)
max(INDICE_HACINAMIENTO$P_HACINAMIENTO)
columnas_hac$sumas_tasas = INDICE_HACINAMIENTO$P_HACINAMIENTO + INDICE_HACINAMIENTO$P_HACINAMIENTO_C
hist(INDICE_HACINAMIENTO$P_HACINAMIENTO)
hist(INDICE_HACINAMIENTO$P_HACINAMIENTO, breaks = 20)
hist(INDICE_HACINAMIENTO$P_HACINAMIENTO, breaks = 20, main = "Histograma de hogares hacinados")
hist(INDICE_HACINAMIENTO$P_HACINAMIENTO, breaks = 20, main = "Histograma de hogares hacinados", xlab = "Porcentaje de hogares hacinados", ylab = "Frecuencia")
hist(INDICE_HACINAMIENTO$P_HACINAMIENTO, breaks = 20, main = "Histograma de hogares hacinados", xlab = "Porcentaje de hogares hacinados", ylab = "Frecuencia", col = "blue")
hist(INDICE_HACINAMIENTO$P_HACINAMIENTO, breaks = 20, main = "Histograma de hogares hacinados", xlab = "Porcentaje de hogares hacinados", ylab = "Frecuencia", col = "pink")
hist(INDICE_HACINAMIENTO$P_HACINAMIENTO, breaks = 20, main = "Histograma de hogares hacinados", xlab = "Porcentaje de hogares hacinados", ylab = "Frecuencia", col = "purple")
install.packages("sp")
library(geojsonio)
library(sp)
comunas_gs = geojson_read(C:\\Users\\Marco Córdova\\Desktop\\Ayudantia\\Ayudantia_R\\DATOS\\GEOJSON\\comunas_gs_84.geojson)
library(geojsonio)
library(sp)
load("C:/Users/Marco Córdova/Desktop/Ayudantia/Modulo N°7/Clase N°1/Jose_codigo_1.RData")
load("C:/Users/Marco Córdova/Desktop/Ayudantia/Modulo N°7/Clase N°1/Jose_codigo_1.RData")
load("C:/Users/Marco Córdova/Desktop/Ayudantia/Modulo N°7/Clase N°1/Jose_codigo_1.RData")
Library(sp)
library(sp)
library(geojsonio)
##Vectores
##Vector de nombre
nombres=c("Carlos", "Matias", "Fernando")
##Vector de peso
pesos=c("65","70","86")
##Vector Logico
mayor18= (False,True,True)
##Vector Logico
mayor18= ("False","True","True")
##Vector Logico
mayor18= c("False","True","True")
pesos=+10
pesos +10
##Vector de peso
pesos=c("65","70","86")
pesos +10
pesos+10
pesos + 10
pesos=+10
##Vector de peso
pesos=c("65","70","86")
pesos + 10
lenght(pesos)
##Vectores
##Vector de nombre
nombres=c("Carlos", "Matias", "Fernando")
##Vector de peso
pesos=c("65","70","86")
##Vector Logico
mayor18= c("False","True","True")
length(pesos)
pesos+10
pesos + 10
pesos+10
mean(pesos)
mean(pesos)
##Vector de peso
pesos=c(65,70,86)
pesos+10
mean(pesos)
nombres[2]
##Vectores segun condicion
pesos_altos= pesos>=70
pesos=[pesos_altos]
pesos=[pesos_altos]
##Vectores segun condicion
pesos_altos= pesos>=70
pesos=[pesos_altos]
pesos[pesos_altos]
nombres[pesos_altos
##Matrices
#Nuevos pesos
pesos2020=pesos
pesos2021=c(70,80,90)
pesos_alumno=matrix(c(pesos2020,pesos2021), nrow = 3, ncol = 2)
##Matrices
#Nuevos pesos
pesos2020=pesos
pesos2021=c(70,80,90)
pesos_alumno=matrix(c(pesos2020,pesos2021), nrow = 3, ncol = 2)
View(pesos_alumno)
View(pesos_alumno)
View(pesos_alumno)
View(pesos_alumno)
##Nombres Columnas
colnames(pesos_alumno)= c("pesos2020","Pesos 2021")
View(pesos_alumno)
View(pesos_alumno)
##Nombres Columnas
colnames(pesos_alumno)= c("pesos 2020","Pesos 2021")
View(pesos_alumno)
View(pesos_alumno)
##Nombres Filas
rownames(pesos_alumno)= c("Carlos", "Matias", "Fernando")
View(pesos_alumno)
View(pesos_alumno)
##Selección de elementos
#Se crea Data Frame de los alumnos utilizando vectores
df_alumnos= data.frame(nombres,pesos,mayor18)
View(df_alumnos)
View(df_alumnos)
## Se crea archivo CSV
write.csv(df_alumnos,"C:\\Users\\Marco Córdova\\Desktop\\Ayudantia\\Ayudantia_R\\Practica con R\\df_alumnos_practica.csv")
## Se crea archivo CSV
write.csv(df_alumnos,"C:\\Users\\Marco Córdova\\Desktop\\Ayudantia\\Ayudantia_R\\Practica con R\\df_alumnos_practica.csv", row.names = FALSE)
library(readr)
INDICE_HACINAMIENTO <- read_csv("C:/Users/Marco Córdova/Desktop/Ayudantia/Ayudantia_R/DATOS/CSV/INDICE_HACINAMIENTO.csv",
locale = locale(encoding = "ISO-8859-1"))
comunas_hac <- read_csv("C:/Users/Marco Córdova/Desktop/Ayudantia/Ayudantia_R/DATOS/CSV/INDICE_HACINAMIENTO.csv",
locale = locale(encoding = "ISO-8859-1"))
View(comunas_hac)
comunas_hac$P_HACINAMIENTO
mean(comunas_hac$P_HACINAMIENTO)
max(comunas_hac$P_HACINAMIENTO)
unique(comunas_hac$REGION)
##Generar nueva columna
comunas_hac$sumas_tasas = comunas_hac$P_HACINAMIENTO + comunas_hac$P_HACINAMIENTO_C
View(comunas_hac)
View(comunas_hac)
colnames(comunas_hac)[6]= "Sumas Tasas"
View(comunas_hac)
View(comunas_hac)
#Eliminar columnas
comunas_hac$`Sumas Tasas`= NULL
View(comunas_hac)
View(comunas_hac)
vector_order=order(comunas_hac$P_HACINAMIENTO)
comunas_hac_menor= comunas_hac[vector_order]
comunas_hac_menor= comunas_hac[vector_order,]
View(comunas_hac_menor)
View(comunas_hac_menor)
vector_orden_mayor= order(comunas_hac$P_HACINAMIENTO,decreasing = TRUE)
View(comunas_hac)
View(comunas_hac)
summary(comunas_hac)
comunas_hac_rm = comunas_hac[comunas_hac$REGION == "Metropolitana",]
comunas_hac_alto = comunas_hac[comunas_hac$P_HACINAMIENTO >= 7.29]
comunas_hac_alto = comunas_hac[comunas_hac$P_HACINAMIENTO >= 7.29,]
library(ggplot2)
hist(comunas_hac$P_HACINAMIENTO)
##Histograma
hist(comunas_hac$P_HACINAMIENTO)
##Histograma
hist(comunas_hac$P_HACINAMIENTO, breaks = 20)
##Histograma
hist(comunas_hac$P_HACINAMIENTO, breaks = 20, main = % hogares hacinados)
##Histograma
hist(comunas_hac$P_HACINAMIENTO, breaks = 20, main = "% hogares hacinados")
##Histograma
hist(comunas_hac$P_HACINAMIENTO, breaks = 20, main = "% hogares hacinados", xlab = "Frecuencia)
##Histograma
hist(comunas_hac$P_HACINAMIENTO, breaks = 20, main = "% hogares hacinados", xlab = "Frecuencia,)
##Histograma
hist(comunas_hac$P_HACINAMIENTO, breaks = 20, main = "% hogares hacinados", xlab = "Frecuencia",)
##Histograma
hist(comunas_hac$P_HACINAMIENTO, breaks = 20, main = "% hogares hacinados", xlab = "Porcentajes de hogares hacinados",)
##Histograma
hist(comunas_hac$P_HACINAMIENTO, breaks = 20, main = "% hogares hacinados", xlab = "Porcentajes de hogares hacinados",ylab="frecuencia",)
##Histograma
hist(comunas_hac$P_HACINAMIENTO, breaks = 20, main = "% hogares hacinados", xlab = "Porcentajes de hogares hacinados",ylab="Frecuencia",)
##Histograma
hist(comunas_hac$P_HACINAMIENTO, breaks = 20, main = "% hogares hacinados", xlab = "Porcentajes de hogares hacinados",ylab="Frecuencia",col = "blue",)
##Grafico dispersión
plot(comunas_hac$P_HACINAMIENTO, comunas_hac$P_HACINAMIENTO_C)
##Grafico dispersión
plot(comunas_hac$P_HACINAMIENTO, comunas_hac$P_HACINAMIENTO_C, main="Grafico de dispersión", xlab = "% hogares hacinados", ylab="% hogares criticos", col = "orange",)
library(sp)
library(geojson)
library(geojsonio)
detach("package:geojsonio", unload = TRUE)
library(geojsonio)
## GEOJSON
library(sp)
remove.packages("geojsonio", lib="~/R/win-library/4.0")
install.packages("geojsonio")
library(geojsonio)
## GEOJSON
library(sp)
library(geojsonio)
##SimulaciÃ³n al azar
area_sim=abs(rnorm(553,1000,400))
hist(area_sim,xlab="area [mts cuadrados]", ylab="Frecuencia",main="Histograma datos de area simulados", prob=T)
lines(density(area_sim),col=2,lwd=2)
setwd("C:/Users/Marco Córdova/Desktop/Ayudantia/Modulo N°7/Clase N°1/Repaso/archivos clase")
supermercados=read.csv("supermercados.csv")
df=data.frame(a=c(400,6000),den=c(5042,47137))
# regresiÃ³n lineal
lm_df=lm(a~den,df)
# generaciÃ³n del componente estocÃ¡stico
res_sim=rnorm(553,0,400)
#simulaciÃ³n del Ã¡rea
area_sim=abs(lm_df$coefficients[1]+lm_df$coefficients[2]*supermercados$densidad_super+res_sim)
area_sim[area_sim<quantile(area_sim,0.25)]=quantile(area_sim,0.25)
# plot de area sim vs densidad
p<-ggplot(data=supermercados, aes(x=densidad_super,y=area_sim)) +
geom_point(color="skyblue1")+geom_smooth(method="lm", se=TRUE, fullrange=FALSE, level=0.95)+
xlab("densidad [habs/super]")+ylab("Ã¡rea simulada [mts cuadrados")+ggtitle("Scatter plot area sim vs densidad")
library(ggplot2)
# plot de area sim vs densidad
p<-ggplot(data=supermercados, aes(x=densidad_super,y=area_sim)) +
geom_point(color="skyblue1")+geom_smooth(method="lm", se=TRUE, fullrange=FALSE, level=0.95)+
xlab("densidad [habs/super]")+ylab("Ã¡rea simulada [mts cuadrados")+ggtitle("Scatter plot area sim vs densidad")
p
p<-ggplot(data=supermercados, aes(x=densidad_super,y=area_sim)) +
geom_point(color="skyblue1")+geom_smooth(method="lm", se=TRUE, fullrange=FALSE, level=0.95)+
xlab("densidad [habs/super]")+ylab("Ã¡rea simulada [mts cuadrados")+ggtitle("Scatter plot area sim vs densidad")
p
tabla_atractivo=data.frame(supermercados[,5:4],area=area_sim)
tabla_atractivo$nombre=as.character(c(1:nrow(tabla_atractivo)))
#shape_gs_urbano=readShapePoly("shape_gs.shp")
shape_gs_urbano=shapefile("shape_gs.shp")
library(rgdal)
library(raster)
#shape_gs_urbano=readShapePoly("shape_gs.shp")
shape_gs_urbano=shapefile("shape_gs.shp")
# coordenadas de las zonas censales
zc_coords=coordinates(shape_gs_urbano)
# tabla zc con nombre y coordenadas
tabla_zc=data.frame( Geocodigo=shape_gs_urbano$GEOCODIGO,X=zc_coords[,1],Y=zc_coords[,2] )
setwd("C:/Users/Marco Córdova/Desktop/Ayudantia/Modulo N°7/Clase N°1/Repaso/archivos clase")
vector=read.csv("vector.csv")
# PreparaciÃ³n final de la tabla input para Huff
nombre_tienda_rep=rep(tabla_atractivo[,4],each=1643)
nombre_zc_rep=rep(tabla_zc[,1],553)
df_dist=data.frame(ID_tienda=nombre_tienda_rep, ID_zc=nombre_zc_rep,dist=vector)
tabla_atractivo$nombre=tabla_atractivo$nombre
names(tabla_atractivo)[4]="ID_tienda"
tabla_huff_input=plyr::join(df_dist, tabla_atractivo,by="ID_tienda",type="inner")
tabla_huff_input$alpha=rep(3,nrow(tabla_huff_input))
tabla_huff_input$beta=rep(1,nrow(tabla_huff_input))
setwd("C:/Users/Marco Córdova/Desktop/Ayudantia/Modulo N°7/Clase N°1/Repaso/archivos clase")
source("huff-tools.r")
huff_probs<-huff_basic(tabla_huff_input$ID_tienda, tabla_huff_input$area, tabla_huff_input$ID_zc,
tabla_huff_input$dist.X, tabla_huff_input$alpha, tabla_huff_input$beta)
names(huff_probs)[1]="GEOCODIGO"
# suma prob por supermercado
sum(huff_probs$huff_probability[huff_probs$destinations_name=="1"])
huff_probs_enr=huff_probs #creacion de respaldo
# agregar cantidad de personas a cada ZC
huff_probs_enr=join(shape_gs_urbano@data[,c(10,18)],huff_probs_enr,by="GEOCODIGO")
# agregar Ã¡rea a cada supermercado
# previo se necesita cambiar el nombre de la columna "destination_name" a "ID_tienda"
names(huff_probs_enr)[3]="ID_tienda" #cambiar nombre columna destination_name
huff_probs_enr=join(huff_probs_enr,tabla_atractivo[,c(3,4)],by="ID_tienda")
huff_probs_enr=huff_probs_enr[,c(1,2,3,8,4,5,6,7)] # reordenar columnas
huff_probs_enr$personas_tienda=huff_probs_enr$CANT_PER*huff_probs_enr$huff_probability # personas esperadas por super
# QuÃ© supermercados reciben la mayor cantidad de personas
tienda_cant_personas=aggregate(personas_tienda ~ ID_tienda, data = huff_probs_enr, FUN = sum)
tienda_cant_personas_loc=join(tienda_cant_personas,tabla_atractivo, by="ID_tienda")
tienda_cant_personas_loc_grandes=tienda_cant_personas_loc[order(tienda_cant_personas_loc$personas_tienda,decreasing=T),][1:20,]
# QuÃ© supermercados reciben la mayor cantidad de personas
tienda_cant_personas=aggregate(personas_tienda ~ ID_tienda, data = huff_probs_enr, FUN = sum)
# agregar Ã¡rea a cada supermercado
# previo se necesita cambiar el nombre de la columna "destination_name" a "ID_tienda"
names(huff_probs_enr)[3]="ID_tienda" #cambiar nombre columna destination_name
huff_probs_enr=join(huff_probs_enr,tabla_atractivo[,c(3,4)],by="ID_tienda")
# suma prob por supermercado
sum(huff_probs$huff_probability[huff_probs$destinations_name=="1"])
huff_probs_enr=huff_probs #creacion de respaldo
# agregar cantidad de personas a cada ZC
huff_probs_enr=join(shape_gs_urbano@data[,c(10,18)],huff_probs_enr,by="GEOCODIGO")
huff_probs_enr=huff_probs #creacion de respaldo
# agregar cantidad de personas a cada ZC
huff_probs_enr=join(shape_gs_urbano@data[,c(10,18)],huff_probs_enr,by="GEOCODIGO")
# agregar Ã¡rea a cada supermercado
# previo se necesita cambiar el nombre de la columna "destination_name" a "ID_tienda"
names(huff_probs_enr)[3]="ID_tienda" #cambiar nombre columna destination_name
huff_probs_enr=join(huff_probs_enr,tabla_atractivo[,c(3,4)],by="ID_tienda")
huff_probs_enr=huff_probs_enr[,c(1,2,3,8,4,5,6,7)] # reordenar columnas
huff_probs_enr$personas_tienda=huff_probs_enr$CANT_PER*huff_probs_enr$huff_probability # personas esperadas por super
huff_probs<-huff_basic(tabla_huff_input$ID_tienda, tabla_huff_input$area, tabla_huff_input$ID_zc,
tabla_huff_input$dist.X, tabla_huff_input$alpha, tabla_huff_input$beta)
names(huff_probs)[1]="GEOCODIGO"
# suma prob por supermercado
sum(huff_probs$huff_probability[huff_probs$destinations_name=="1"])
huff_probs_enr=huff_probs #creacion de respaldo
# agregar cantidad de personas a cada ZC
huff_probs_enr=join(shape_gs_urbano@data[,c(10,18)],huff_probs_enr,by="GEOCODIGO")
# agregar Ã¡rea a cada supermercado
# previo se necesita cambiar el nombre de la columna "destination_name" a "ID_tienda"
names(huff_probs_enr)[3]="ID_tienda" #cambiar nombre columna destination_name
huff_probs_enr=join(huff_probs_enr,tabla_atractivo[,c(3,4)],by="ID_tienda")
huff_probs_enr=huff_probs_enr[,c(1,2,3,8,4,5,6,7)] # reordenar columnas
huff_probs_enr$personas_tienda=huff_probs_enr$CANT_PER*huff_probs_enr$huff_probability # personas esperadas por super
# QuÃ© supermercados reciben la mayor cantidad de personas
tienda_cant_personas=aggregate(personas_tienda ~ ID_tienda, data = huff_probs_enr, FUN = sum)
tienda_cant_personas_loc=join(tienda_cant_personas,tabla_atractivo, by="ID_tienda")
tienda_cant_personas_loc_grandes=tienda_cant_personas_loc[order(tienda_cant_personas_loc$personas_tienda,decreasing=T),][1:20,]
tienda_cant_personas_loc_peq=tienda_cant_personas_loc[order(tienda_cant_personas_loc$personas_tienda,decreasing=F),][1:20,]
plot(shape_gs_urbano)
##20 grandes (en cantidad de gente) verde
points(tienda_cant_personas_loc_grandes$Longitud,tienda_cant_personas_loc_grandes$Latitud,pch=19,col=3)
##20 pequenos (en cantidad de gente) rojo
points(tienda_cant_personas_loc_peq$Longitud,tienda_cant_personas_loc_peq$Latitud,pch=19,col=2)
tienda_cant_personas_loc_peq=tienda_cant_personas_loc[order(tienda_cant_personas_loc$personas_tienda,decreasing=F),][1:20,]
tienda_cant_personas_loc_grandes=tienda_cant_personas_loc[order(tienda_cant_personas_loc$personas_tienda,decreasing=T),][1:20,]
# QuÃ© supermercados reciben la mayor cantidad de personas
tienda_cant_personas=aggregate(personas_tienda ~ ID_tienda, data = huff_probs_enr, FUN = sum)
tienda_cant_personas_loc=join(tienda_cant_personas,tabla_atractivo, by="ID_tienda")
# QuÃ© supermercados reciben la mayor cantidad de personas
tienda_cant_personas=aggregate(personas_tienda ~ ID_tienda, data = huff_probs_enr, FUN = sum)
tienda_cant_personas_loc=join(tienda_cant_personas,tabla_atractivo, by="ID_tienda")
# QuÃ© supermercados reciben la mayor cantidad de personas
tienda_cant_personas=aggregate(personas_tienda ~ ID_tienda, data = huff_probs_enr, FUN = sum)
tienda_cant_personas_loc=join(tienda_cant_personas,tabla_atractivo, by="ID_tienda")
# agregar Ã¡rea a cada supermercado
# previo se necesita cambiar el nombre de la columna "destination_name" a "ID_tienda"
names(huff_probs_enr)[3]="ID_tienda" #cambiar nombre columna destination_name
huff_probs_enr=join(huff_probs_enr,tabla_atractivo[,c(3,4)],by="ID_tienda")
# agregar Ã¡rea a cada supermercado
# previo se necesita cambiar el nombre de la columna "destination_name" a "ID_tienda"
names(huff_probs_enr)[3]="ID_tienda" #cambiar nombre columna destination_name
huff_probs_enr=join(huff_probs_enr,tabla_atractivo[,c(3,4)],by="ID_tienda")
huff_probs_enr=huff_probs_enr[,c(1,2,3,8,4,5,6,7)] # reordenar columnas
huff_probs_enr$personas_tienda=huff_probs_enr$CANT_PER*huff_probs_enr$huff_probability # personas esperadas por super
geom_sf(
)
geom_sf()
ggplot(data=shape_gs_urbano)
ggplot(data=shape_gs_urbano) + geom_sf()
ggplot(data=shape_gs_urbano) +
geom_sf()
plot(shape_gs_urbano)
ggplot(data=shape_gs_urbano) +
geom_sf(fill=blue)
install.packages("tidyverse")
library(tidyverse)
ggplot(shape_gs_urbano)
plot(shape_gs_urbano)
setwd("C:/Users/Marco Córdova/Desktop/Ayudantia/Modulo N°7/Clase N°1/Repaso/archivos clase")
supermercados=read.csv("supermercados.csv")
df=data.frame(a=c(400,6000),den=c(5042,47137))
# regresiÃ³n lineal
lm_df=lm(a~den,df)
# generaciÃ³n del componente estocÃ¡stico
res_sim=rnorm(553,0,400)
#simulaciÃ³n del Ã¡rea
area_sim=abs(lm_df$coefficients[1]+lm_df$coefficients[2]*supermercados$densidad_super+res_sim)
area_sim[area_sim<quantile(area_sim,0.25)]=quantile(area_sim,0.25)
# plot de area sim vs densidad
p<-ggplot(data=supermercados, aes(x=densidad_super,y=area_sim)) +
geom_point(color="skyblue1")+geom_smooth(method="lm", se=TRUE, fullrange=FALSE, level=0.95)+
xlab("densidad [habs/super]")+ylab("Ã¡rea simulada [mts cuadrados")+ggtitle("Scatter plot area sim vs densidad")
tabla_atractivo=data.frame(supermercados[,5:4],area=area_sim)
tabla_atractivo$nombre=as.character(c(1:nrow(tabla_atractivo)))
setwd("C:/Users/Marco Córdova/Desktop/Ayudantia/Modulo N°7/Clase N°1/Repaso/archivos clase")
#shape_gs_urbano=readShapePoly("shape_gs.shp")
shape_gs_urbano=shapefile("shape_gs.shp")
library(raster)
#shape_gs_urbano=readShapePoly("shape_gs.shp")
shape_gs_urbano=shapefile("shape_gs.shp")
# coordenadas de las zonas censales
zc_coords=coordinates(shape_gs_urbano)
# tabla zc con nombre y coordenadas
tabla_zc=data.frame( Geocodigo=shape_gs_urbano$GEOCODIGO,X=zc_coords[,1],Y=zc_coords[,2] )
setwd("C:/Users/Marco Córdova/Desktop/Ayudantia/Modulo N°7/Clase N°1/Repaso/archivos clase")
vector=read.csv("vector.csv")
# PreparaciÃ³n final de la tabla input para Huff
nombre_tienda_rep=rep(tabla_atractivo[,4],each=1643)
nombre_zc_rep=rep(tabla_zc[,1],553)
df_dist=data.frame(ID_tienda=nombre_tienda_rep, ID_zc=nombre_zc_rep,dist=vector)
tabla_atractivo$nombre=tabla_atractivo$nombre
names(tabla_atractivo)[4]="ID_tienda"
tabla_huff_input=plyr::join(df_dist, tabla_atractivo,by="ID_tienda",type="inner")
tabla_huff_input$alpha=rep(3,nrow(tabla_huff_input))
tabla_huff_input$beta=rep(1,nrow(tabla_huff_input))
setwd("C:/Users/Marco Córdova/Desktop/Ayudantia/Modulo N°7/Clase N°1/Repaso/archivos clase")
source("huff-tools.r")
huff_probs<-huff_basic(tabla_huff_input$ID_tienda, tabla_huff_input$area, tabla_huff_input$ID_zc,
tabla_huff_input$dist.X, tabla_huff_input$alpha, tabla_huff_input$beta)
names(huff_probs)[1]="GEOCODIGO"
# suma prob por supermercado
sum(huff_probs$huff_probability[huff_probs$destinations_name=="1"])
huff_probs_enr=huff_probs #creacion de respaldo
# agregar cantidad de personas a cada ZC
huff_probs_enr=join(shape_gs_urbano@data[,c(10,18)],huff_probs_enr,by="GEOCODIGO")
# agregar Ã¡rea a cada supermercado
# previo se necesita cambiar el nombre de la columna "destination_name" a "ID_tienda"
names(huff_probs_enr)[3]="ID_tienda" #cambiar nombre columna destination_name
huff_probs_enr=join(huff_probs_enr,tabla_atractivo[,c(3,4)],by="ID_tienda")
huff_probs_enr=huff_probs_enr[,c(1,2,3,8,4,5,6,7)] # reordenar columnas
huff_probs_enr$personas_tienda=huff_probs_enr$CANT_PER*huff_probs_enr$huff_probability # personas esperadas por super
# QuÃ© supermercados reciben la mayor cantidad de personas
tienda_cant_personas=aggregate(personas_tienda ~ ID_tienda, data = huff_probs_enr, FUN = sum)
tienda_cant_personas_loc=join(tienda_cant_personas,tabla_atractivo, by="ID_tienda")
tienda_cant_personas_loc_grandes=tienda_cant_personas_loc[order(tienda_cant_personas_loc$personas_tienda,decreasing=T),][1:20,]
tienda_cant_personas_loc_peq=tienda_cant_personas_loc[order(tienda_cant_personas_loc$personas_tienda,decreasing=F),][1:20,]
plot(shape_gs_urbano)
##20 grandes (en cantidad de gente) verde
points(tienda_cant_personas_loc_grandes$Longitud,tienda_cant_personas_loc_grandes$Latitud,pch=19,col=3)
ggplot(shape_gs_urbano)
ggplot(shape_gs_urbano) +geom_sf()
##SimulaciÃ³n al azar
area_sim=abs(rnorm(553,1000,400))
hist(area_sim,xlab="area [mts cuadrados]", ylab="Frecuencia",main="Histograma datos de area simulados", prob=T)
lines(density(area_sim),col=2,lwd=2)
supermercados=read.csv("supermercados.csv")
df=data.frame(a=c(400,6000),den=c(5042,47137))
# regresiÃ³n lineal
lm_df=lm(a~den,df)
# generaciÃ³n del componente estocÃ¡stico
res_sim=rnorm(553,0,400)
#simulaciÃ³n del Ã¡rea
area_sim=abs(lm_df$coefficients[1]+lm_df$coefficients[2]*supermercados$densidad_super+res_sim)
area_sim[area_sim<quantile(area_sim,0.25)]=quantile(area_sim,0.25)
# plot de area sim vs densidad
p<-ggplot(data=supermercados, aes(x=densidad_super,y=area_sim)) +
geom_point(color="skyblue1")+geom_smooth(method="lm", se=TRUE, fullrange=FALSE, level=0.95)+
xlab("densidad [habs/super]")+ylab("Ã¡rea simulada [mts cuadrados")+ggtitle("Scatter plot area sim vs densidad")
tabla_atractivo=data.frame(supermercados[,5:4],area=area_sim)
tabla_atractivo$nombre=as.character(c(1:nrow(tabla_atractivo)))
#shape_gs_urbano=readShapePoly("shape_gs.shp")
shape_gs_urbano=shapefile("shape_gs.shp")
# coordenadas de las zonas censales
zc_coords=coordinates(shape_gs_urbano)
# tabla zc con nombre y coordenadas
tabla_zc=data.frame( Geocodigo=shape_gs_urbano$GEOCODIGO,X=zc_coords[,1],Y=zc_coords[,2] )
vector=read.csv("vector.csv")
# PreparaciÃ³n final de la tabla input para Huff
nombre_tienda_rep=rep(tabla_atractivo[,4],each=1643)
nombre_zc_rep=rep(tabla_zc[,1],553)
df_dist=data.frame(ID_tienda=nombre_tienda_rep, ID_zc=nombre_zc_rep,dist=vector)
tabla_atractivo$nombre=tabla_atractivo$nombre
names(tabla_atractivo)[4]="ID_tienda"
tabla_huff_input=plyr::join(df_dist, tabla_atractivo,by="ID_tienda",type="inner")
tabla_huff_input$alpha=rep(3,nrow(tabla_huff_input))
tabla_huff_input$beta=rep(1,nrow(tabla_huff_input))
source("huff-tools.r")
huff_probs<-huff_basic(tabla_huff_input$ID_tienda, tabla_huff_input$area, tabla_huff_input$ID_zc,
tabla_huff_input$dist.X, tabla_huff_input$alpha, tabla_huff_input$beta)
names(huff_probs)[1]="GEOCODIGO"
# suma prob por supermercado
sum(huff_probs$huff_probability[huff_probs$destinations_name=="1"])
# suma prob por supermercado
sum(huff_probs$huff_probability[huff_probs$destinations_name=="1"])
huff_probs_enr=huff_probs #creacion de respaldo
# agregar cantidad de personas a cada ZC
huff_probs_enr=join(shape_gs_urbano@data[,c(10,18)],huff_probs_enr,by="GEOCODIGO")
plot(shape_gs_urbano)
xlab ("longitud")+ ylab ("latitud")
plot(shape_gs_urbano, main="prueba de mapa")
plot(shape_gs_urbano, main="prueba de mapa", colour="blue")
plot(shape_gs_urbano, main="prueba de mapa", fill="blue")
plot(shape_gs_urbano, main="prueba de mapa") + xlab="longitud" + ylab="latitud"
plot(shape_gs_urbano, main="prueba de mapa",xlab="longitud", ylab="latitud")
plot(shape_gs_urbano, main="Localización optima de supermercados",xlab="longitud", ylab="latitud")
plot(shape_gs_urbano, main="Localización optima de supermercados",xlab="longitud", ylab="latitud") +
labs(fill=points())
plot(shape_gs_urbano)
plot(shape_gs_urbano, fill(blue))
plot(shape_gs_urbano, fill="blue")
plot(shape_gs_urbano)
##Hacer mapa
plot(shape_gs_urbano, main="Localización optima de supermercados",xlab="longitud", ylab="latitud", caption= "Elaboracion propia")
##Hacer mapa
plot(shape_gs_urbano, main="Localización optima de supermercados",xlab="longitud", ylab="latitud", caption = "Elaboracion propia")
